package HumanLifeSimulator;

import HumanLifeSimulator.Enum.Objetivo;
import HumanLifeSimulator.PersonagensJogo.Jogador;
import HumanLifeSimulator.PersonagensJogo.NPC;
import HumanLifeSimulator.PropriedadeJogador.AcessorioModa;
import HumanLifeSimulator.PropriedadeJogador.Imovel;
import HumanLifeSimulator.PropriedadeJogador.Propriedade;
import HumanLifeSimulator.PropriedadeJogador.Veiculo;

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class Sims {

    /**
     * M√©todo que permite criar Pessoa a partir da consola;
     *
     * @return
     */
    public static Jogador criarPessoa() {

        //variaveis para guardar os atributos iniciais do jogador;

        String nome;
        double dinheiro = 0;
        Profissao profissaoJogador = null;
        int necessidadeSono = 100;
        int necessidadeRefeicao = 100;
        int necessidadeSocial = 100;
        int estatuto = 0;
        int educacao = 0;
        ArrayList<Propriedade> propriedades = new ArrayList<>();
        Objetivo objetivoDeVida = null;
        int condicionamentoFisico = 0;

        Scanner input = new Scanner(System.in);

        System.out.println("‚ú® Escolha o nome do jogador: ‚ú®");
        nome = input.nextLine();

        System.out.println();
        System.out.println("Qual o objetivo de vida do seu jogador ?");
        System.out.println();
        System.out.println("1- MILION√ÅRIO ü§ëüí∞üí∏üíµ");
        System.out.println("2- TER UMA FAM√çLIA COMPLETA üë∞üèº‚Äç‚ôÄÔ∏èü§µüèº‚Äç‚ôÇÔ∏èü§∞üèºüë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèªüë®‚Äçüë©‚Äçüëß‚Äçüë¶");
        System.out.println("3- SER UMA CELEBRIDADE üìΩÔ∏èüíÅüèº‚Äç‚ôÄÔ∏è‚úàÔ∏èüì∫üì∏");
        System.out.println("4- SER UM ATLETA DE CROSSFIT üèãÔ∏èü§∏üèºüí™üèºüèÉüèº‚Äç‚ôÇÔ∏è");
        System.out.println("5- SER UM PROGRAMADOR BACK-END üíªüë©üèº‚Äçüíªü§òüèº");
        System.out.println("6- SER UM INFLUENCER FITNESS üëôüì≤üì∏üí∏ü§≥üèº");
        System.out.println("7- SER UM N√îMADE DIGITAL üåèüß≠üèûÔ∏èüèïÔ∏èüèùÔ∏èüèñÔ∏è");

        int opcao = input.nextInt();

        switch (opcao) {
            case 1:
                objetivoDeVida = Objetivo.MILIONARIO;
                break;
            case 2:
                objetivoDeVida = Objetivo.FAMILIA_COMPLETA;
                break;
            case 3:
                objetivoDeVida = Objetivo.CELEBRIDADE;
                break;
            case 4:
                objetivoDeVida = Objetivo.CROSSFITEIRO;
                break;
            case 5:
                objetivoDeVida = Objetivo.PROGRAMADOR;
                break;
            case 6:
                objetivoDeVida = Objetivo.INFLUENCER_FITNESS;
                break;
            case 7:
                objetivoDeVida = Objetivo.NOMADE_DIGITAL;
                break;

            default:
                System.out.println("Volta l√° e escolhes uma op√ß√£o v√°lida, please üôÉ");
                break;
        }

        Jogador jogador = new Jogador(nome, 0, objetivoDeVida, null, 100, 100, 100, 0, 0, 0);
       jogador.exibirDetalhes();
        return jogador;
    }

    /**
     * M√©todo onde est√£o todas as inst√¢ncias de todos os objetos e onde est√° no fluxo da aplica√ß√£o;
     */
    public void jogo(Jogador jogador) {

        //instancia dos AcessoriosModa
        AcessorioModa acessorioModa1 = new AcessorioModa("Fato de treino", 50, 3, "Nike", false);
        AcessorioModa acessorioModa2 = new AcessorioModa("√ìculos de sol", 20, 1, "RayBan", false);
        AcessorioModa acessorioModa3 = new AcessorioModa("Saia Jeans", 70, 2, "Diesel", true);
        AcessorioModa acessorioModa4 = new AcessorioModa("Sneakers", 120, 2, "Adidas", false);
        AcessorioModa acessorioModa5 = new AcessorioModa("Cal√ßa de alfaiataria em linho", 150, 3, "Massimo Dutti", true);
        AcessorioModa acessorioModa6 = new AcessorioModa("Sweater de l√£", 100, 1, "Lacoste", true);
        AcessorioModa acessorioModa7 = new AcessorioModa("Cinto de pele ", 70, 1, "Mango", true);
        AcessorioModa acessorioModa8 = new AcessorioModa("Rel√≥gio em a√ßo inoxid√°vel ", 250, 3, "Daniel Wellington", false);
        AcessorioModa acessorioModa9 = new AcessorioModa("Pulseira de ouro", 2000, 4, "Herm√®s", true);
        AcessorioModa acessorioModa10 = new AcessorioModa("Perfume", 35, 4, "Jo Malone", true);
        AcessorioModa acessorioModa11 = new AcessorioModa("Biquine", 50, 3, "Nike", false);
        AcessorioModa acessorioModa12 = new AcessorioModa("Meias ", 15, 1, "Primark", false);
        AcessorioModa acessorioModa13 = new AcessorioModa("Fato cl√°ssico", 1500, 3, "Dior", true);
        AcessorioModa acessorioModa14 = new AcessorioModa("Vestido de seda", 1000, 4, "Channel", true);
        AcessorioModa acessorioModa15 = new AcessorioModa("T-shirt", 5, 3, "Nike", true);


        //instancia dos imoveis

        Imovel imovel1 = new Imovel("Casa de praia", 70000, 4, 6);
        Imovel imovel2 = new Imovel("Loft", 40000, 2, 2);
        Imovel imovel3 = new Imovel("Casa geminada", 55000, 4, 4);
        Imovel imovel4 = new Imovel("Sobrado", 10000, 3, 3);
        Imovel imovel5 = new Imovel("Apartamento R/C", 45000, 4, 3);
        Imovel imovel6 = new Imovel("Studio", 30000, 3, 2);
        Imovel imovel7 = new Imovel("Flat", 35000, 2, 2);
        Imovel imovel8 = new Imovel("Bangal√¥", 40000, 4, 3);
        Imovel imovel9 = new Imovel("Duplex", 80000, 5, 5);
        Imovel imovel10 = new Imovel("Triplex", 90000, 5, 6);
        Imovel imovel11 = new Imovel("Apartamento Rooftop", 65000, 4, 4);
        Imovel imovel12 = new Imovel("Barraca de Camping", 100, 1, 2);
        Imovel imovel13 = new Imovel("Quinta ", 60000, 5, 10);
        Imovel imovel14 = new Imovel("Casa de campo", 50000, 5, 6);
        Imovel imovel15 = new Imovel("Pal√°cio", 100000, 5, 12);

        //instancia dos ve√≠culos

        Veiculo veiculo1 = new Veiculo("Carro el√©trico", 7000, 4, "Tesla", "ZZZ");
        Veiculo veiculo2 = new Veiculo("Mota ", 2000, 3, "Yamaha", "MT-125");
        Veiculo veiculo3 = new Veiculo("Scotter", 3000, 2, "Vespa", "Zard");
        Veiculo veiculo4 = new Veiculo("Super carro de corrida", 10000, 5, "Lamborghini ", "Urus ");
        Veiculo veiculo5 = new Veiculo("Lancha ", 30000, 4, "Focker ", "MasterCraft");
        Veiculo veiculo6 = new Veiculo("Barquinho pescador", 1000, 3, "Hodgon", "Rei dos Mares");
        Veiculo veiculo7 = new Veiculo("Cami√£o", 12000, 3, "Volkswagem", "Tomba Tudo");
        Veiculo veiculo8 = new Veiculo("Bike para crian√ßa", 100, 1, "AllBike", "Miudinhos");
        Veiculo veiculo9 = new Veiculo("Bike de aventura/montanha", 500, 3, "AllBike", "Aventureiros");
        Veiculo veiculo10 = new Veiculo("Trotinete", 350, 2, "Segway", "NineBot");
        Veiculo veiculo11 = new Veiculo("Iate", 50000, 4, "Yachts", "Ferretti");
        Veiculo veiculo12 = new Veiculo("Carro de m√£o", 25, 4, "Tesla", "ZZZ");
        Veiculo veiculo13 = new Veiculo("Helicoptero", 90000, 5, "Pantera do C√©u", "BlackPanther");
        Veiculo veiculo14 = new Veiculo("Jetski ", 4000, 2, "Hayley Sea", "HS-55");
        Veiculo veiculo15 = new Veiculo("Velocipe", 70, 1, "Kids Toys", "Reizinho dos Passeios");

        //instancias dos NPC (familia do jogador)

        NPC npc1 = new NPC("Luis", 200000, 2);
        NPC npc2 = new NPC("Caio", 150000, 4);
        NPC npc3 = new NPC("Sarinha", 100000, 5);
        NPC npc4 = new NPC("Anna", 80000, 3);
        NPC npc5 = new NPC("Manu", 50000, 2);
        NPC npc6 = new NPC("Marcelo", 90000, 4);
        NPC npc7 = new NPC("Bruna", 120000, 3);
        NPC npc8 = new NPC("Veronica", 140000, 5);
        NPC npc9 = new NPC("Paulo", 95000, 3);
        NPC npc10 = new NPC("Tiago", 50000, 2);

        //npc para ado√ß√£o: NPC aleat√≥rio sem dinheiro ou estatutoMinimo ao Array da fam√≠lia

        NPC npcAdocao1 = new NPC("Bibi", 0, 0);
        NPC npcAdocao2 = new NPC("Lolo", 0, 0);
        NPC npcAdocao3 = new NPC("Nuno", 0, 0);
        NPC npcAdocao4 = new NPC("Mila", 0, 0);
        NPC npcAdocao5 = new NPC("Ruizinho", 0, 0);




        //instancias das profiss√µes

        Profissao profissao1 = new Profissao("Atleta CrossFit", 300, false, 2, 2);
        Profissao profissao2 = new Profissao("Software Developer", 350, true, 1, 4);
        Profissao profissao3 = new Profissao("Design Interiores", 250, false, 2, 3);
        Profissao profissao4 = new Profissao("Agricultor", 200, false, 0, 0);
        Profissao profissao5 = new Profissao("Contabilista", 210, true, 2, 3);
        Profissao profissao6 = new Profissao("Chef de Cozinha", 240, true, 3, 3);
        Profissao profissao7 = new Profissao("Professor", 200, true, 3, 4);
        Profissao profissao8 = new Profissao("M√©dico", 400, true, 3, 4);
        Profissao profissao9 = new Profissao("Gerente de Loja", 230, false, 2, 2);
        Profissao profissao10 = new Profissao("Nutricionista", 230, true, 2, 3);

        //adicionar os empregos no Centro de Emprego
        CentroDeEmprego centroDeEmprego = new CentroDeEmprego();
        centroDeEmprego.addProfissao(profissao1);
        centroDeEmprego.addProfissao(profissao4);
        centroDeEmprego.addProfissao(profissao2);
        centroDeEmprego.addProfissao(profissao3);
        centroDeEmprego.addProfissao(profissao5);
        centroDeEmprego.addProfissao(profissao6);
        centroDeEmprego.addProfissao(profissao7);
        centroDeEmprego.addProfissao(profissao8);
        centroDeEmprego.addProfissao(profissao9);
        centroDeEmprego.addProfissao(profissao10);

        //adicionar propriedades de acessorios de moda no Shopping
        Shopping shopping = new Shopping();
        shopping.addPropriedade(acessorioModa1);
        shopping.addPropriedade(acessorioModa2);
        shopping.addPropriedade(acessorioModa3);
        shopping.addPropriedade(acessorioModa4);
        shopping.addPropriedade(acessorioModa5);
        shopping.addPropriedade(acessorioModa6);
        shopping.addPropriedade(acessorioModa7);
        shopping.addPropriedade(acessorioModa8);
        shopping.addPropriedade(acessorioModa9);
        shopping.addPropriedade(acessorioModa10);
        shopping.addPropriedade(acessorioModa11);
        shopping.addPropriedade(acessorioModa12);
        shopping.addPropriedade(acessorioModa13);
        shopping.addPropriedade(acessorioModa14);
        shopping.addPropriedade(acessorioModa15);


        //adicionar propriedades de im√≥veis no Shopping
        shopping.addPropriedade(imovel1);
        shopping.addPropriedade(imovel2);
        shopping.addPropriedade(imovel3);
        shopping.addPropriedade(imovel4);
        shopping.addPropriedade(imovel5);
        shopping.addPropriedade(imovel6);
        shopping.addPropriedade(imovel7);
        shopping.addPropriedade(imovel8);
        shopping.addPropriedade(imovel9);
        shopping.addPropriedade(imovel10);
        shopping.addPropriedade(imovel11);
        shopping.addPropriedade(imovel12);
        shopping.addPropriedade(imovel13);
        shopping.addPropriedade(imovel14);
        shopping.addPropriedade(imovel15);

        //adicionar propriedades de veiculos no Shopping
        shopping.addPropriedade(veiculo1);
        shopping.addPropriedade(veiculo2);
        shopping.addPropriedade(veiculo3);
        shopping.addPropriedade(veiculo4);
        shopping.addPropriedade(veiculo5);
        shopping.addPropriedade(veiculo6);
        shopping.addPropriedade(veiculo7);
        shopping.addPropriedade(veiculo8);
        shopping.addPropriedade(veiculo9);
        shopping.addPropriedade(veiculo10);
        shopping.addPropriedade(veiculo11);
        shopping.addPropriedade(veiculo12);
        shopping.addPropriedade(veiculo13);
        shopping.addPropriedade(veiculo14);
        shopping.addPropriedade(veiculo15);

        addNPC(npc1);
        addNPC(npc2);
        addNPC(npc3);
        addNPC(npc4);
        addNPC(npc5);
        addNPC(npc6);
        addNPC(npc7);
        addNPC(npc8);
        addNPC(npc9);
        addNPC(npc10);
        addNPC(npcAdocao1);
        addNPC(npcAdocao2);
        addNPC(npcAdocao3);
        addNPC(npcAdocao4);
        addNPC(npcAdocao5);




        // 2 ciclos aninhados: um para o dia e outro para os momentos do dia(4 momentos do dia );
        //50 ser√° o total de dias;
        for (int dia = 1; dia <= 50; dia++) {

            switch (dia){
                case 6:
                    rotinaUniversidade(jogador);
                    break;
                case 3:
                    casamento(jogador);
                    break;
                case 8:
                    ficarDoente(jogador);
                    break;
                case 10:
                    tempoChuvoso(jogador);
                    break;
                case 12:
                    competicaoCrossfit(jogador);
                    break;
                case 14:
                    eventoPublico(jogador);
                    break;

                default:
                    for (int momentoDia = 1; momentoDia <= 4; momentoDia++) {

                        switch (momentoDia) {
                            case 1: //pela manh√£
                                System.out.println();
                                System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t√â hora de come√ßar mais um dia ... ü§óü§óü§ó");
                                System.out.println();
                                System.out.println("\t\t\t\t\t\t\t\t\t\t\t\tüå§Ô∏èüå§Ô∏èüå§Ô∏èüå§Ô∏èüå§Ô∏èüå§Ô∏è  M A N H √É  üå§Ô∏èüå§Ô∏èüå§Ô∏èüå§Ô∏èüå§Ô∏èüå§Ô∏è");
                                break;
                            case 2: //meio dia
                                System.out.println();
                                System.out.println("\t\t\t\t\t\t\t\t\t\t\t\t‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è  M E I O - D I A  ‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è");
                                break;
                            case 3: // meio da tarde
                                System.out.println();
                                System.out.println("\t\t\t\t\t\t\t\t\t\t\t\tüåáüåáüåáüåáüåáüåá  T A R D E  üåáüåáüåáüåáüåáüåá");
                                break;
                            case 4: //noite
                                System.out.println();
                                System.out.println("\t\t\t\t\t\t\t\t\t\t\t\tüåõüå†üåõüå†üåõüå†  N O I T E  üåõüå†üåõüå†üåõüå†");
                                break;
                        }
                        momentoDia(jogador, shopping, centroDeEmprego);
                    }
                    atualizarNecessidades(jogador);
                    if (jogador.isCasado()){ //no final de cada dia o dinheiro do jogador aumenta em 30 dinheiros se ele for casado
                        jogador.setDinheiro(jogador.getDinheiro() + 30);
                    }
                    jogador.exibirDetalhes();
            }
        }
    }

    public void momentoDia(Jogador jogador, Shopping shopping, CentroDeEmprego centroDeEmprego) {   //precisei colocar Shopping para conseguir aceder ao que foi instanciado

        Scanner input = new Scanner(System.in);

        System.out.println();
        System.out.println("\t\t\t\t\t\tBora movimentar esse jogo! üòú Posso te dar umas op√ß√µes para ocupares teu tempo agora: üëå");
        System.out.println();

        System.out.println("\t\t\t\t\t\t1. " + "üî∏----- O que achas de come√ßar agora um belo dia de trabalho? üë®üèº‚Äçüíªü§ë N√£o vai te custar nadinha üòä -----üî∏");
        System.out.println();

        System.out.println("\t\t\t\t\t\t2. " + "üî∏----- Est√°s com sono? üò¥üò¥üò¥ Que tal descansar e dormir um pouco? -----üî∏");
        System.out.println();

        System.out.println("\t\t\t\t\t\t3. " + "üî∏----- Pensando melhor uma boa refei√ß√£o n√£o seria nada mal agora, hein ? üçïüçîüçü Queres comer? ü•ûü•ôüåÆ -----üî∏");
        System.out.println();

        System.out.println("\t\t\t\t\t\t4. " + "üî∏----- Preferes sair da pregui√ßa e ir treinar? üèÉüèº‚Äç‚ôÇÔ∏èüí™üèº A aula de CrossFit come√ßa agora mesmo ü§∏üèº‚Äç‚ôÇÔ∏èüèãüèº‚Äç‚ôÇÔ∏èüèãüèº‚Äç‚ôÄÔ∏èüí™üèº -----üî∏");
        System.out.println();

        System.out.println("\t\t\t\t\t\t5. " + "üî∏----- Torrar uma boa grana comprando no shopping n√£o seria m√° ideia, vem comigo üí∏üí∏üí∏üí∏ -----üî∏");
        System.out.println();

        System.out.println("\t\t\t\t\t\t6. " + "üî∏----- Estudar me parece uma excelente ideia, que tal uma nova forma√ß√£o ? üìöüíª -----üî∏");
        System.out.println();

        System.out.println("\t\t\t\t\t\t7. " + "üî∏----- Faz tempo que n√£o visitas as tuas propriedades... vamos dar um passeio por elas ? üöóüåÖüè° -----üî∏");
        System.out.println();

        System.out.println("\t\t\t\t\t\t8. " + "üî∏----- Est√°s aborrecido com teu trabalho atual e queres procurar um novo? üò≠ü•µü•∫ Eu te entendo, vem que te ajudo nisso üòéüòéüòé -----üî∏");
        System.out.println();

        if (jogador.isCasado()){ //s√≥ vai passar para essa op√ß√£o de adoca√ß√£o depois de casar
            System.out.println("\t\t\t\t\t\t9. " + "üî∏----- üçºüçºüçº Agora que est√°s casado, seria uma boa altura para aumentar a fam√≠lia? Que tal adotar um beb√™? üçºüçºüçºüë∂üèΩüë∂üèΩüë∂üèΩ -----üî∏");
            System.out.println();
        }

        System.out.println("\t\t\t\t\t\t‚ú® √ìtimo, agora me diz o que te apetece fazer agora? ");
        System.out.println();

        int opcao = input.nextInt();

        switch (opcao) {
            case 1:
                primeiroEmprego(jogador);
                break;
            case 2:
                dormir(jogador);
                break;
            case 3:
                comer(jogador);
                break;
            case 4:
                treinar(jogador);
                break;
            case 5:
                fazerCompras(jogador,shopping );
                break;
            case 6:
                terFormacao(jogador);
                break;
            case 7:
                verPropriedades(jogador);
                break;
            case 8:
                procurarEmprego(jogador);
                break;
            case 9:
                if (jogador.isCasado()) {
                    adotarCrianca(jogador);
                    break;
                }
            default:
                System.out.println("Tantas op√ß√µes disponiveis e tu escolheu logo uma que n√£o existe? üò§üò§üò§");
                System.out.println("Escolhe uma op√ß√£o do menu, vai la. üòéü§™");
                break;
        }
    }

    public void primeiroEmprego(Jogador jogadorAtual){
        Scanner input = new Scanner(System.in);

        if (jogadorAtual.getProfissao() == null) {
            System.out.println();
            System.out.println("Estas prestes a dar um grande passo na tua vida profissional:");
            System.out.println("Conseguir o teu primeiro emprego ü§©ü§©ü§©ü§©ü§©");
            System.out.println();
            System.out.println("üîò Esses s√£o os empregos dispon√≠veis atualmente no Centro de Empregos: üîò ");
            System.out.println();

            CentroDeEmprego.imprimirListaProfissoes();

            System.out.println();
            System.out.println("Digite aqui o n√∫mero do emprego que voc√™ quer: ");
            int escolha = input.nextInt();

            ArrayList<Profissao> listaDeProfissao = CentroDeEmprego.getListaDeProfissoes();

            if (escolha >= 1 && escolha <= listaDeProfissao.size()){
                Profissao profissaoEscolhida = listaDeProfissao.get(escolha - 1);

                jogadorAtual.setProfissao(profissaoEscolhida);
                jogadorAtual.setEstatuto(profissaoEscolhida.getEstatuto()); //atualizar estatuto do jogador com o estatuto da profiss√£o

                System.out.println("PARAB√â√â√â√â√âNS! üéâüéâüéâüéâ Agora tens um emprego, j√° podes come√ßar a ganhar dinheiro trabalhando !!!");
                System.out.println();
                System.out.println("Esses s√£o os detalhes da tua nova profiss√£o: ");
                jogadorAtual.getProfissao().exibirDetalhesProfissao();
            } else {
                System.out.println("Escolhe uma profiss√£o v√°lida, por favor ");
            }
        } else {
            Profissao profissaoAtual = jogadorAtual.getProfissao();
            jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() + profissaoAtual.getSalarioDia());

            System.out.println(" Voc√™ foi recompensado com " + profissaoAtual.getSalarioDia() + " dinheiros pelo seu dia de trabalho üí∏üòâ");
            System.out.println("O teu saldo atual √© de " + jogadorAtual.getDinheiro() +" dinheiros ü§ëü§ë. Continuas assim que vais terminar bem!!");
        }
    }


    /**
     * M√©todo que rep√µe a necessidade de sono de volta a 100;
     *
     * @param jogadorAtual
     */
    public void dormir(Jogador jogadorAtual) {

        jogadorAtual.setNecessidadeSono(100);
        System.out.println("üò¥üò¥  Com esse cochilo voc√™ aumentou a necessidade de sono em " + jogadorAtual.getNecessidadeSono() + " pontos!");
    }

    /**
     * M√©todo que rep√µe a necessidade de refei√ß√£o de volta a 100 e diminui 5 dinheiros do Jogador;
     *
     * @param jogadorAtual
     */
    public void comer(Jogador jogadorAtual) {

        jogadorAtual.setNecessidadeRefeicao(100);
        jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() - 5);
        System.out.println("De barriga cheia tudo fica melhor, n√© ? ü•™‚ò∫Ô∏è");
        System.out.println("A tua refei√ß√£o custou 5 dinheiros! ü§ëü§ë Teu saldo total √© de : " + jogadorAtual.getDinheiro() + " dinheiros. üí∏üí∏üí∏");

    }

    /**
     * M√©todo que rep√µe a necessidade social de volta a 100 se o jogador escolher treinar;
     *
     * @param jogadorAtual
     */
    public void treinar(Jogador jogadorAtual) {

        //se o jogadorAtual tiver o objetivo de vida crossfitter, aumanta o condicionamento f√≠sico tamb√©m
        if (jogadorAtual.getObjetivoVida().equals(Objetivo.CROSSFITEIRO)){
            jogadorAtual.setCondicionamentoFisico(jogadorAtual.getCondicionamentoFisico() + 250);
            jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() + 200);
            jogadorAtual.setNecessidadeSocial(jogadorAtual.getNecessidadeSocial() + 100);
            System.out.println();
            System.out.println("Pelos vistos o teu objetivo de vida √© ser um eterno Crossfitter... ü§©ü§©ü§©");
            System.out.println("Sendo assim, ganhaste 200 dinheiros por ser atleta da modalidade üí™üèºüí™üèºüí™üèº");
            System.out.println("Ganhou tamb√©m 50 pontos no teu social pela tua intera√ß√£o com outros atletas üë≠üë©üèª‚Äçü§ù‚Äçüë®üèªüë©üèª‚Äçü§ù‚Äçüë®üèª ");
            System.out.println();
            System.out.println("üí™üèΩüí™üèΩüí™üèΩ Teu condicionamento f√≠sico est√° aumentando e ficando incr√≠vel!! üòß J√° consigo ver teus gominhos daqui, PARABENS! üí™üèΩüí™üèΩüí™üèΩ ");

            System.out.println();

        } else {  //se n√£o tiver o objetivo de vida ser crossfitter
            System.out.println();
            jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() + 150);
            jogadorAtual.setNecessidadeSocial(jogadorAtual.getNecessidadeSocial() + 100);
            System.out.println("üí™üèºüí™üèºüí™üèº Voc√™ foi premiado pela sua excelente disposi√ß√£o em fazer um treino de CROSSFIT!! ");
            System.out.println("üí∏üí∏üí∏ Ganhou 150 dinheiros üí∏üí∏üí∏");
            System.out.println("Ganhou tamb√©m 50 pontos no teu social pela tua intera√ß√£o com outros atletas üë≠üë©üèª‚Äçü§ù‚Äçüë®üèªüë©üèª‚Äçü§ù‚Äçüë®üèª ");
            System.out.println();

        }
        jogadorAtual.exibirDetalhes();
    }

    /**
     * M√©todo que invoca o m√©todo vender da classe Shopping;
     *
     * @param jogadorAtual
     */
    public void fazerCompras(Jogador jogadorAtual, Shopping shopping) {

        shopping.vender(jogadorAtual);
    }

    /**
     * M√©todo que aumenta a educa√ß√£o do jogador em +30 e o estatuto em +5 se escolher essa op√ß√£o no menu;
     * @param jogadorAtual
     */
    public void terFormacao(Jogador jogadorAtual) {
        jogadorAtual.setEducacao(jogadorAtual.getEducacao() + 30);
        jogadorAtual.setEstatuto(jogadorAtual.getEstatuto() + 5);
        System.out.println();
        System.out.println("Parab√©ns pelo teu esfor√ßo cont√≠nuo!! ü§©ü§©ü§©");
        System.out.println();
        System.out.println("Essa forma√ß√£o tem um custo de 30 dinheiros, tenho certeza que ser√° um bom investimento üíªüíª");
        System.out.println("Atrav√©s do conhecimento vais longe! Continue assim ü•≥ü•≥ü•≥");
        System.out.println("Com essa nova forma√ß√£o voc√™ aumentou a sua educa√ß√£o em 30 pontos e seu estatuto em 5 pontosüòâ");
        System.out.println();
    }

    /**
     * M√©todo que imprime na consola as propriedades que o jogador tem;
     *
     * @param jogadorAtual
     */
    public void verPropriedades(Jogador jogadorAtual) {

        System.out.println("üèòÔ∏èüèôÔ∏èüèöÔ∏èüèïÔ∏è    TUAS PROPRIEDADES    üèòÔ∏èüèôÔ∏èüèöÔ∏èüèïÔ∏è");
        for (Propriedade propriedadeAtual : jogadorAtual.getPropriedades()){
            if (propriedadeAtual instanceof Imovel){
                propriedadeAtual.exibirDetalhesPropriedade();
            }
        }

    }

    /**
     * M√©todo para o jogador procurar emprego;
     * Primeiro imprime todas as profiss√µes disponiveis no Centro de Emprego,
     * depois verifica se o jogador tem criterios suficientes para o emprego escolhido ou n√£o;
     *
     * @param jogadorAtual
     */
    public void procurarEmprego(Jogador jogadorAtual) {
        Scanner input = new Scanner(System.in);

        CentroDeEmprego.imprimirListaProfissoes(); //imprimir todas as profiss√µes do array listaDeProfissoes;

        System.out.println();
        System.out.println("üë®üèº‚Äçüåæüë©üèº‚Äçüç≥üë®üèº‚Äç‚úàÔ∏èüßëüèº‚Äçüöí Escreva o nome da profiss√£o: üëÆüèºüë®üèº‚Äçüåæüë∑üèº‚Äç‚ôÄÔ∏èüë®üèº‚Äç‚öïÔ∏è");
        String nomeProfissao = input.nextLine(); //profiss√£o de escolha do utilizador depois de ver a lista de empregos

        ArrayList<Profissao> listaDeProfissoes = CentroDeEmprego.getListaDeProfissoes();

        boolean profissaoEncontrada = false;
        Profissao profissaoEscolhida = null;

        for (Profissao profissaoAtual : listaDeProfissoes) {

            if (profissaoAtual.getNome().equalsIgnoreCase(nomeProfissao)) {
                profissaoEncontrada = true;
                profissaoEscolhida = profissaoAtual;

                if (profissaoEscolhida.isFormal()){ //verificar se a profiss√£o √© formal √© true
                    if (jogadorAtual.possuiAcessorioFormal()){ //se o jogador tem pelo menos 1 acessorio formal
                        if (jogadorAtual.getEstatuto() >= profissaoEscolhida.getEstatuto() && jogadorAtual.getEducacao() >= profissaoEscolhida.getNivelMinimoEducacao()){
                            jogadorAtual.setProfissao(profissaoEscolhida);
                            System.out.println("Parabens, voc√™ acabou de ser admitido para o cargo de " + profissaoEscolhida.getNome());
                            System.out.println("Vamos celebrar ü•Çü•Çü•Çü•Çü•Çü•Ç");
                            System.out.println();
                        } else {
                            System.out.println("Sinto muito, voc√™ ainda n√£o tem crit√©rios para esse cargo üò£üò£");
                        }
                    }else{
                        System.out.println("Desculpe, para esse cargo voc√™ precisa de pelo menos 01 acess√≥rio formal");
                        System.out.println("Podes ir as compras no SHOPPING SIMS DEV üëîüëóüëúüëûüë†");
                        System.out.println();
                    }
                }else {
                    if (jogadorAtual.getEstatuto() >= profissaoEscolhida.getEstatuto() && jogadorAtual.getEducacao() >= profissaoEscolhida.getNivelMinimoEducacao()){
                        jogadorAtual.setProfissao(profissaoEscolhida);
                    } else {
                        System.out.println("Poxa üò•üò• voc√™ ainda n√£o atende aos crit√©rios do cargo");
                        System.out.println("Continua a procura, nao desista!! ");

                    }
                }
            }
        }

        //teste para ver se foi aplicado o novo cargo
       // System.out.println(jogadorAtual.getProfissao());
        jogadorAtual.exibirDetalhes();
    }

    //colocar fun√ß√£o no final de cada ciclo;

    /**
     * M√©todo que atualiza as necessidades do jogador no final de cada ciclo da itera√ß√£o, ou seja, no final de cada dia.
     * A necessidade sono diminui 25 pontos, a necessidade refei√ß√£o diminui 20 pontos e a necessidade social diminui 15 pontos.
     *
     * @param jogadorAtual
     */
    public void atualizarNecessidades(Jogador jogadorAtual) {
        int necessidadeSono = jogadorAtual.getNecessidadeSono() - 25; //necessidadeSono atual - 25 pontos no final de cada ciclo
        int necessidadeRefeicao = jogadorAtual.getNecessidadeRefeicao() - 20;
        int necessidadeSocial = jogadorAtual.getNecessidadeSocial() - 15;

        jogadorAtual.setNecessidadeSono(necessidadeSono);
        jogadorAtual.setNecessidadeRefeicao(necessidadeRefeicao);
        jogadorAtual.setNecessidadeSocial(necessidadeSocial);
    }

    public void rotinaUniversidade(Jogador jogadorAtual) {
        Scanner input = new Scanner(System.in);

        System.out.println("Hoje √© um dia muito especial  üè´üìö");
        System.out.println();
        System.out.println("‚≠ê‚≠ê‚≠ê Est√°s indo rumo a um futuro brilhante com as forma√ß√µes que tens feito ao longo desse tempo... ‚≠ê‚≠ê‚≠ê");
        System.out.println();
        System.out.println("üè´üìöüè´üìö       Gostarias de dar um passo a frente e entrar na UNIVERSIDADE SIMS DEV ?   (y/n)    üè´üìöüè´üìö");
        String escolha = input.next();

                if (escolha.equalsIgnoreCase("y")) {
                    jogadorAtual.setEducacao(jogadorAtual.getEducacao() +  50); //aumenta educa√ß√£o em 50
                    jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() - 3000); //reduz 3000 do dinheiro total;
                    System.out.println();
                    System.out.println("PARAB√âNS por essa conquista incrivel! üíªü§©üíªü§©");
                    System.out.println("Tenho certeza que esse investimento vai valer muito a pena!");
                    System.out.println("Boa sorte na tua jornada ü•Çü•Çü•Çü•Çü•Çü•Ç");

                } else {
                    System.out.println("Pelos vistos n√£o tens a inten√ß√£o de fazer universidade... üò£ ");
                    System.out.println("Desejo boa sorte no caminho que desejares trilhar üòâüòâ ");

                }
    }

    //criando um arrayList de pretendentes para adicionar os NPC para o futuro casamento
    public static ArrayList<NPC> pretendentes = new ArrayList<NPC>();
    public void addNPC(NPC npc){

        pretendentes.add(npc);
    }

    public void imprimirListaNpc(){
        for (NPC npcAtual: pretendentes){
            if (npcAtual.getDinheiro() > 0){
                npcAtual.exibirDetalhes();
            }
        }
    }


    /**
     * M√©todo que permite do jogador a op√ß√£o de CASAMENTO no dia 22 do jogo;
     * O jogador tem a possibilidade de aceitar ou recusar e partir o cora√ß√£o de alguem;
     * Se aceitar, √© feito a verifica√ß√£o da escolha do NPC; ser√° verificado tamb√©m se atende aos criterios do casamento;
     *
     * @param jogadorAtual
     */
    public void casamento(Jogador jogadorAtual) {

        Scanner input = new Scanner(System.in);
        String escolha;


                System.out.println("Vejo que est√°s caminhando bem nessa vida... ‚ú®‚ú® ");
                System.out.println("O que achas de dar um pr√≥ximo grande passo e CASARES? ü§µüèº‚Äç‚ôÇÔ∏èüííüë∞üèº");
                System.out.println("üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèªüë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèªüë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèªüë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª Aceitas? üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèªüë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèªüë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèªüë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (y/n)");
                escolha = input.next();

                switch (escolha) {
                    case "y":
                        System.out.println();
                        System.out.println("Chegamos na melhor parte!!!!!! ");
                        System.out.println("ü•∞ü•∞ü•∞ü•∞ A ESCOLHA DO PRETENDENTE: ü•∞ü•∞ü•∞ü•∞");
                        System.out.println();
                        imprimirListaNpc();
                        System.out.println();

                        NPC npcEscolhido = escolherNPC(jogadorAtual);
                        System.out.println();

                        if (podeCasar(jogadorAtual, npcEscolhido)) {

                            System.out.println();
                            System.out.println("\t\t\t\t\t\tüé∂üé∂üé∂ PANPANPANPAN üé∂üé∂üé∂ PANPANPANPAN üé∂üé∂üé∂ PANPANPANPAN üé∂üé∂üé∂ PANPANPANPAN üé∂üé∂üé∂");
                            System.out.println();
                            System.out.println(jogadorAtual.getNome() + ", voc√™ aceita " + npcEscolhido.getNome() + " como seu futuro/a esposo/a ?   (y/n)");
                            escolha = input.next();

                            if (escolha.equalsIgnoreCase("y")){

                                //se o casamento acontecer, aumenta ao dinheiro do jogador todo o dinheiro que o npc tem;
                                jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() + npcEscolhido.getDinheiro());
                                npcEscolhido.setDinheiro(0);

                                jogadorAtual.addNPC(npcEscolhido); //npn escolhido entra oficialmente para a familia üòé

                                jogadorAtual.setCasado(true);

                                System.out.println("üéâüéâüéâüéâü•Çü•Çü•Ç EU VOS DECLARO CASADOOOOOS üéâüéâüéâüéâü•Çü•Çü•Ç ");
                            } else {
                                System.out.println("Casamento cancelado, partistes o cora√ß√£o do teu pretendente üò≠");
                            }

                        }
                        break;

                    case "n":
                        System.out.println();
                        System.out.println("üçæüç∑üç∏üçπü•Çüçªüç∫");
                        System.out.println("Eitaaaaa, queres continuar na vida de copos e amigos");
                        System.out.println("Eu compreendo, talvez ainda n√£o tenhas encontrado um grande amor para tua vida...");
                        System.out.println("Partistes o cora√ß√£o de algu√©m... üíî‚ù§Ô∏è‚Äçü©πüíî‚ù§Ô∏è‚Äçü©π");
                        System.out.println("Vida que segue !! üçªüç∫ ");
                        System.out.println();
                        break;
                    default:
                        System.out.println("Sei que posso ter te pegado de surpresa...");
                        System.out.println("Mas para essa pergunta s√≥ h√° 2 op√ß√µes de resposta: ");
                        System.out.println("YYYYEEESSSSS OU NNNNOOOOOOO, me responde ai, vai ‚ò∫Ô∏èüòâüòã ");
                        break;
        }
    }

    /**
     * M√©todo que identifica o NPC que o jogador quer casar;
     * Percorre o array de NPC do jogador e faz a correspond√™ncia com o NPC escolhido;
     *
     * @param jogadorAtual
     * @return NPC que o jogador escolheu para casar;
     */
    public static NPC escolherNPC(Jogador jogadorAtual) {

        Scanner input = new Scanner(System.in);
        String escolha;

        System.out.println();
        System.out.println("Escreve o NOME do teu futuro noivo/noiva :");
        escolha = input.next();

        for (NPC npcAtual : pretendentes) {
            if (npcAtual.getNome().equalsIgnoreCase(escolha) && npcAtual.getDinheiro() > 0) {
                System.out.println();
                System.out.println("Pretendente escolhido!! Agora vem a melhor parte: ");
                System.out.println("üííüííüíçüíç A CERIM√îNIA DE CASAMENTO üíçüíçüííüíí");

                return npcAtual;
            }
        }
        System.out.println("Essa pessoa n√£o faz parte da lista de pretendentes, desculpe üò™üíî");
        return null;
    }

    /**
     * M√©todo que verifica SE o jogador pode casar com o NPC escolhido mediante as exigencias do casamento:
     * O jogador ter uma propriedade que albergue 2 ou mais pessoas e ter o estatuto m√≠nimo para casar com determinado NPC;
     *
     * @param jogadorAtual
     * @param npcEscolhido
     * @return boolean TRUE: se tiver propriedade e estatudo minimo || FALSE: se faltar alguma exig√™ngia;
     */
    public static boolean podeCasar(Jogador jogadorAtual, NPC npcEscolhido) {
        //booleano para verificar se o jogador tem imovel para abrigar 2 pessoas
        boolean imovelAdequado = false;

        //ciclo percorrer o array de propriedades para identificar as propriedades do jogador
        for (Propriedade propriedadeAtual : jogadorAtual.getPropriedades()) {
            if (propriedadeAtual instanceof Imovel) {  //verificar se √© instancia de imovel;
                if (((Imovel) propriedadeAtual).getCapacidadePessoas() >= 2) { //se for, verificar se tem capacidade para mais de 2 pessoas
                    imovelAdequado = true; //se for retorna true
                    break;
                }
            }
        }
        //verificar se o jogador tem estatuto minimo suficiente para casar com p NPC
        boolean estatutoAdequado = jogadorAtual.getEstatuto() >= npcEscolhido.getEstatutoMinimo();

        if (!imovelAdequado || !estatutoAdequado) { //SE n√£o houver imovel ou estatuto adequado retorna false;
            return false;
        }
        return true; //se as 2 condi√ß√µes for verdadeira
    }

    public static int capacidadeImovel(Jogador jogadorAtual){

        int capacidadeMaxima = 0;

        for (Propriedade propriedadeAtual : jogadorAtual.getPropriedades()){
            if (propriedadeAtual instanceof Imovel){
                Imovel imovelAtual = (Imovel) propriedadeAtual;
                int capacidadeAtual = imovelAtual.getCapacidadePessoas();

                if (capacidadeAtual > capacidadeMaxima){
                    capacidadeMaxima = capacidadeAtual;
                }

            }
        }
        return capacidadeMaxima;
    }


    public static void adotarCrianca(Jogador jogadorAtual){

        Random random = new Random();
        ArrayList<NPC> bebesParaAdocao = new ArrayList<NPC>();

        for (NPC npcAtual : pretendentes){
            if (npcAtual.getDinheiro() == 0 && npcAtual.getEstatutoMinimo() == 0){
                bebesParaAdocao.add(npcAtual);
            }
        }

        int indiceBebe = random.nextInt(bebesParaAdocao.size());
        NPC bebeAleatorio = bebesParaAdocao.get(indiceBebe);

        if (capacidadeImovel(jogadorAtual) > jogadorAtual.getFamilia().size()+1){
            jogadorAtual.addNPC(bebeAleatorio);
            System.out.println();
            System.out.println("Parabens! Voc√™s acabaram de adotar uma crian√ßa! ");
            System.out.println("O nome do seu beb√™ √© " + bebeAleatorio.getNome());
            System.out.println("üë∂üèΩüçºüç≠üë∂üèΩüçºüç≠üë∂üèΩüçºüç≠üë∂üèΩüçºüç≠üë∂üèΩüçºüç≠üë∂üèΩ");
            System.out.println();

        } else {
            System.out.println("üò≠üò≠üò≠üò≠üò≠üò≠");
            System.out.println("Desculpe, voc√™ e seu esposo/a ainda n√£o tem uma casa com capacidade para abrigar toda a familia ");
            System.out.println("Minha sugest√£o √© comprar um novo im√≥vel para conseguir abrigar a todos");
            System.out.println("Podes ir na imobiliaria SIMS DEV para ver os im√≥veis dispon√≠veis para compra ü§©");
            System.out.println("üè°üè°üè°üè°üè°üè°üè°üè°üè°üè°üè°üè°üè°üè°üè°");
        }
    }

    //Eventos aleatorios do jogo: 1) simular o jogador doente

    /**
     * M√©todo de um acontecimento aleatorio onde o jogador ficar√° doente no dia 15;
     * Dependendo dos sintomas pode precisar comprar rem√©dio e gastar 1 dinheiro (tem redu√ß√£o do seu dinheiro total);
     * @param jogadorAtual
     */
    public static void ficarDoente(Jogador jogadorAtual) {

                Scanner input = new Scanner(System.in);

                System.out.println("ATCHIMMM ü§ßü§ßü§ßüí¶üí¶üí¶ ATCHIMMM ü§ßü§ßü§ßüí¶üí¶üí¶");
                System.out.println(" ohhhhh, vejo que tas come√ßando a ficar constipado ü•¥ü•¥ü•¥");
                System.out.println();
                System.out.println("Te aconselho descanso, ch√° de lim√£o com mel e um benuron 1g ");
                System.out.println("üõåüèºüçµüíä");
                System.out.println();
                System.out.println("Tens rem√©dio em casa ? üíäü§ßüíäü§ß  (y/n)");
                String opcao = input.next();

                switch (opcao){
                    case "y":
                        System.out.println("√ìtimo, segue os cuidados e amanh√£ j√° estas novinho em folha");
                        System.out.println("‚ùó‚ùó‚ùóüì≤üÜò Se houver alguma piora dos sintomas, liga para o SNS24 üÜòüì≤‚ùó‚ùó‚ùó");
                        break;
                    case "n":
                        System.out.println("Se n√£o tens rem√©dio em casa, o DELIVERY SOS j√° est√° a caminho para te ajudar");
                        System.out.println("O entregador vai te deixar o rem√©dio em casa.");
                        System.out.println("O Benuron custa 1 dinheiro, teu contribuinte j√° est√° na fatura üòäüí∏");

                        jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() - 15); //valor do benuron;

                        break;

                    default:
                        System.out.println("Escolhe uma op√ß√£o valida");
                        break;
                }
    }

    //Eventos aleatorios do jogo: 2) simular um campeonato de crossfit

    /**
     * M√©todo de um acontecimento aleatorio onde o jogador poder√° participar de uma competi√ß√£o de CROSSFIT no dia 35;
     * O jogador poder√° escolher participar ou n√£o, se ganhar a competi√ß√£o:
     * ser√° premiado com um aumento no valor do dinheiro total e haver√° redu√ß√£o da necessidade de sono e refei√ß√£o devido ao esfor√ßo;
     * @param jogadorAtual
     */
    public static void competicaoCrossfit(Jogador jogadorAtual) {

        //colocar dias aleatorios entre 30 e 40 por exemplo
        //num aleatorio entre 0 e 1
        Scanner input = new Scanner(System.in);


                System.out.println("üì¢üì¢üì¢ BREAKING NEWS üì¢üì¢üì¢");
                System.out.println();
                System.out.println("üí•üí•üí• Voc√™ foi convidado para participar do Campeonato CROSSGAMES de 2024 Ô∏èüí•üí•üí•");
                System.out.println();
                System.out.println("Me parece uma boa oportunidade para interagir com outros atletas e ganhar um bom pr√™mio ü§ëü§ëü§ëü§ë");
                System.out.println("Aceitas o convite para participar ? üí™üèºüí™üèºüí™üèº (y/n)");
                String escolha = input.next();

                switch (escolha){
                    case "y":
                        System.out.println("üì¢üì¢üì¢üì¢ WOD DA COMPETI√á√ÉO: üì¢üì¢üì¢üì¢");
                        System.out.println();
                        System.out.println(" 3 rounds : ");
                        System.out.println(" (21 reps de cada exerc√≠cio na primeira ronda, 15 reps na segunda, 9 reps na terceira) ");
                        System.out.println(" üîò thrusters  üí™üèºüí™üèºüí™üèº");
                        System.out.println(" üîò pull-ups  üí™üèºüí™üèºüí™üèº");
                        System.out.println(" üîò kettlebell swings  üí™üèºüí™üèºüí™üèº");
                        System.out.println(" üîò burpees  üí™üèºüí™üèºüí™üèº");
                        System.out.println();

                        System.out.println("Est√°s pronto? (y/n)");
                        escolha = input.next();

                        System.out.println();
                        if (escolha.equalsIgnoreCase("y")){

                            if (jogadorAtual.getCondicionamentoFisico() > 1000){
                                System.out.println("üèÜüèÜüèÜüèÜüèÜ Parabens, ganhaste com muita ra√ßa essa competi√ß√£o! üèÜüèÜüèÜüèÜüèÜ");
                                System.out.println("Teu pr√™mio foi: ");
                                System.out.println("ü•áüí∂üí∞üíµ 1000 DINHEIROS ü•áüí∂üí∞üíµ");

                                jogadorAtual.setDinheiro(jogadorAtual.getDinheiro() + 2000);
                                jogadorAtual.setNecessidadeRefeicao(jogadorAtual.getNecessidadeRefeicao() - 5);
                                jogadorAtual.setNecessidadeSono(jogadorAtual.getNecessidadeSono()-3);
                            } else {
                                System.out.println("üò£üò£ Apesar da tua vontade em participar do campeonato de Cross, ainda n√£o tens condionamento f√≠sico para participar");
                                System.out.println("Treina mais e aos poucos vais conseguindo se superar e melhorar! At√© a pr√≥xima e n√£o desista üí™üèΩüí™üèΩüòâüòâ");
                            }


                        } else if (escolha.equalsIgnoreCase("n")) {
                            System.out.println("‚ùå‚ùå‚ùå‚ùå Sem tempo para descanso, voc√™ foi desclassificado por n√£o iniciar o WOD ‚ùå‚ùå‚ùå‚ùå");
                            System.out.println("Na pr√≥xima competi√ß√£o voc√™ vai conseguir, n√£o desista ‚ò∫Ô∏è‚ò∫Ô∏è‚ò∫Ô∏è");
                        } else {
                            System.out.println("Op√ß√£o invalida. ");
                        }

                        break;
                    case "n":
                        System.out.println("Voc√™ decidiu n√£o participar da competi√ß√£o... üò™");
                        System.out.println("Talvez na pr√≥xima üòÄüòÄ");
                        break;
                    default:
                        System.out.println("Escolha uma op√ß√£o v√°lida");
                        break;

        }
    }

    //Eventos aleatorios do jogo: 3) simular um tempo ruim chuvoso

    public static void tempoChuvoso(Jogador jogadorAtual){

        System.out.println(" ‚õàÔ∏è‚õàÔ∏è‚õàÔ∏è‚õàÔ∏è ALERTA: FORTE TEMPORAL HOJE NO PORTO ‚õàÔ∏è‚õàÔ∏è‚õàÔ∏è‚õàÔ∏è");
        System.out.println();
        System.out.println("Infelizmente haver√° consequencias no teu dia... üò≠üò≠üò≠");
        System.out.println();
        System.out.println("Devido ao mau tempo o gin√°sio fechou e j√° n√£o conseguiras treinar hoje ‚òî‚òîüåßÔ∏èüåßÔ∏è");
        System.out.println();

        System.out.println(" üåßÔ∏èüåßÔ∏èüåßÔ∏è Podes ficar em casa, comer algo e dormir ...  ");
        System.out.println("Parece uma boa op√ß√£o para um dia chuvoso, hein ?  ");
        System.out.println("ü•ûü•ûü•™ü•™üìªüíªüì∫");
        System.out.println("Aproveita e descansa um pouco üò¥üò¥");

        jogadorAtual.setNecessidadeSono(jogadorAtual.getNecessidadeSono()-30);
        jogadorAtual.setNecessidadeRefeicao(jogadorAtual.getNecessidadeRefeicao()+20);

    }

    public void eventoPublico(Jogador jogadorAtual){
        Scanner input = new Scanner(System.in);

        System.out.println("Voc√™ foi convidado a participar de um evento de Tecnologia üéÆüïπÔ∏èüíªüì∫üé•");
        System.out.println("Me parece uma execelente oportunidade de interagir com outras pessoas e fazer um bom networking ü§©ü§©ü§©");
        System.out.println("Tens interesse em participar ?   (y/n)");
        String escolha = input.next();

        switch (escolha){
            case "y":
                System.out.println("Tens interesse em participar do COFFEE BREAK ?  (y/n)");
                String opcao =input.next();
                if (opcao.equalsIgnoreCase("y")) {
                    System.out.println("Estas a se divertir no evento e a conhecer novas pessoas!!");
                    System.out.println("Ganhastes 100 pontos por intera√ß√£o com outras pessoas e 50 pontos no teu estatuto");
                    jogadorAtual.setNecessidadeSocial(jogadorAtual.getNecessidadeSocial() + 100);
                    jogadorAtual.setEstatuto(jogadorAtual.getEstatuto() + 50);
                } else {
                    System.out.println("Mesmo sem querer interagir no COFFEE BREAK, voc√™ foi premiado com 30 pontos no estatuto.");
                    jogadorAtual.setEstatuto(jogadorAtual.getEstatuto() + 50);
                }
                break;
            case "n":
                System.out.println(" Poxa, voc√™ perdeu uma excelente oportunidade de conhecer pessoas novas. ");
                System.out.println("A recusa do convite te fez perder 20 pontos na necessidade social. üò£üò£");
                jogadorAtual.setNecessidadeSocial(jogadorAtual.getNecessidadeSocial() - 20);
                break;
            default:
                System.out.println("Escolhe uma op√ß√£o v√°lida");
                break;
        }

    }

    public boolean verificarVitoria(Jogador jogadorAtual){

        Objetivo objetivoVida = jogadorAtual.getObjetivoVida();

        switch (objetivoVida){
            case MILIONARIO:

                int valorTotalPropriedade = 0;
                for (Propriedade propriedadeAtual: jogadorAtual.getPropriedades()){
                    valorTotalPropriedade += propriedadeAtual.getCusto();
                }
                if ((jogadorAtual.getDinheiro() + valorTotalPropriedade) >= 1000000){
                    return true;
                }
                break;
            case FAMILIA_COMPLETA:
                if (jogadorAtual.getFamilia().size() > 4){
                    return true;
                }
                break;
            case CELEBRIDADE:
                if (jogadorAtual.getEstatuto() > 700) {
                    return true;
                }
                break;
            case CROSSFITEIRO:
                if (jogadorAtual.getCondicionamentoFisico() > 2000 && jogadorAtual.getNecessidadeSono() >= 100){
                    return true;
                }
                break;
            case PROGRAMADOR:
                if (jogadorAtual.getEducacao() > 1500 && jogadorAtual.getNecessidadeSono() > 100){
                    return true;
                }
                break;
            case INFLUENCER_FITNESS:
                if (jogadorAtual.getNecessidadeSocial() > 1500 && jogadorAtual.getDinheiro() > 100000){
                    return true;
                }
                break;
            case NOMADE_DIGITAL:
                if (jogadorAtual.getDinheiro() > 150000 && jogadorAtual.getEducacao() > 100){
                    return true;
                }
                break;
            default:
                System.out.println("N√£o houve jogador vencedor!");
                break;
        }
        return false;
    }

}
